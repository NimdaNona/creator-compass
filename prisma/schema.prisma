// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                    String    @id @default(cuid())
  name                  String?
  email                 String    @unique
  emailVerified         DateTime?
  emailVerificationToken String?   @unique
  image                 String?
  password              String?   // For email/password authentication
  passwordResetToken    String?   @unique
  passwordResetExpires  DateTime?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  profile  UserProfile?
  progress UserProgress[]
  achievements UserAchievement[]
  stats    UserStats?
  subscription UserSubscription?
  usageTracking UsageTracking[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Application-specific models
model UserProfile {
  id               String   @id @default(cuid())
  userId           String   @unique
  selectedPlatform String?
  selectedNiche    String?
  startDate        DateTime @default(now())
  currentPhase     Int      @default(1)
  currentWeek      Int      @default(1)
  goals            String?  // JSON string
  preferences      String?  // JSON string
  targetTimeframe  Int?     // in days
  motivation       String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserProgress {
  id          String   @id @default(cuid())
  userId      String
  taskId      String
  completedAt DateTime @default(now())
  phaseId     String?
  weekId      String?
  points      Int      @default(10)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, taskId])
}

model UserAchievement {
  id            String   @id @default(cuid())
  userId        String
  achievementId String
  unlockedAt    DateTime @default(now())
  type          String   @default("general")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
}

model UserStats {
  id                    String   @id @default(cuid())
  userId                String   @unique
  totalPoints           Int      @default(0)
  streakDays            Int      @default(0)
  longestStreak         Int      @default(0)
  lastActiveDate        DateTime @default(now())
  totalTasksCompleted   Int      @default(0)
  badges                String?  // JSON string array
  titles                String?  // JSON string array
  currentTitle          String?
  weeklyGoal            Int      @default(7)
  monthlyGoal           Int      @default(30)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Celebration {
  id        String   @id @default(cuid())
  userId    String
  type      String   // achievement, level_up, streak
  title     String
  message   String
  icon      String
  color     String
  animation String
  duration  Int
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

// Subscription models
model UserSubscription {
  id                 String    @id @default(cuid())
  userId             String    @unique
  stripeCustomerId   String?   @unique
  stripeSubscriptionId String? @unique
  stripePriceId      String?
  yearlyPriceId      String?   // For tracking yearly price ID
  status             String    @default("free") // free, active, canceled, past_due, unpaid
  plan               String    @default("free") // free, premium, enterprise
  isYearly           Boolean   @default(false)
  currentPeriodStart DateTime?
  currentPeriodEnd   DateTime?
  canceledAt         DateTime?
  cancelAtPeriodEnd  Boolean   @default(false)
  trialStart         DateTime?
  trialEnd           DateTime?
  trialEndsAt        DateTime? // For trial management
  pausedAt           DateTime? // For pause functionality
  resumesAt          DateTime? // For resume functionality
  downgradeScheduledAt DateTime? // For scheduled downgrades
  upgradeProtectedUntil DateTime? // Prevent immediate downgrades
  referralCode       String?   @unique // For referral program
  referredBy         String?   // Who referred this user
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Payment {
  id                String   @id @default(cuid())
  userId            String
  stripePaymentId   String   @unique
  stripeInvoiceId   String?
  amount            Int      // in cents
  currency          String   @default("usd")
  status            String   // succeeded, failed, pending
  description       String?
  plan              String   // premium, enterprise
  isYearly          Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

// Webhook idempotency tracking
model ProcessedWebhookEvent {
  id        String   @id @default(cuid())
  eventId   String   @unique
  type      String
  processed DateTime @default(now())
  metadata  String?  // JSON string for debugging
}

// Usage tracking for features
model UsageTracking {
  id        String   @id @default(cuid())
  userId    String
  feature   String   // 'templates', 'platforms', 'exports', 'analytics'
  count     Int      @default(0)
  limit     Int
  resetAt   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, feature])
  @@index([userId])
  @@index([resetAt])
}
