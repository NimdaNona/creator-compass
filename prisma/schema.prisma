// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                    String    @id @default(cuid())
  name                  String?
  email                 String    @unique
  emailVerified         DateTime?
  emailVerificationToken String?   @unique
  image                 String?
  password              String?   // For email/password authentication
  passwordResetToken    String?   @unique
  passwordResetExpires  DateTime?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  profile  UserProfile?
  progress UserProgress[]
  achievements UserAchievement[]
  stats    UserStats?
  subscription UserSubscription?
  usageTracking UsageTracking[]
  taskCompletions TaskCompletion[]
  milestoneAchievements MilestoneAchievement[]
  contentRecommendations ContentRecommendation[]
  generatedTemplates GeneratedTemplate[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Application-specific models
model UserProfile {
  id               String   @id @default(cuid())
  userId           String   @unique
  selectedPlatform String?
  selectedNiche    String?
  startDate        DateTime @default(now())
  currentPhase     Int      @default(1)
  currentWeek      Int      @default(1)
  goals            String?  // JSON string
  preferences      String?  // JSON string
  targetTimeframe  Int?     // in days
  motivation       String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserProgress {
  id          String   @id @default(cuid())
  userId      String
  taskId      String
  completedAt DateTime @default(now())
  phaseId     String?
  weekId      String?
  points      Int      @default(10)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, taskId])
}

model UserAchievement {
  id            String   @id @default(cuid())
  userId        String
  achievementId String
  unlockedAt    DateTime @default(now())
  type          String   @default("general")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
}

model UserStats {
  id                    String   @id @default(cuid())
  userId                String   @unique
  totalPoints           Int      @default(0)
  streakDays            Int      @default(0)
  longestStreak         Int      @default(0)
  lastActiveDate        DateTime @default(now())
  totalTasksCompleted   Int      @default(0)
  badges                String?  // JSON string array
  titles                String?  // JSON string array
  currentTitle          String?
  weeklyGoal            Int      @default(7)
  monthlyGoal           Int      @default(30)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Celebration {
  id        String   @id @default(cuid())
  userId    String
  type      String   // achievement, level_up, streak
  title     String
  message   String
  icon      String
  color     String
  animation String
  duration  Int
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

// Subscription models
model UserSubscription {
  id                 String    @id @default(cuid())
  userId             String    @unique
  stripeCustomerId   String?   @unique
  stripeSubscriptionId String? @unique
  stripePriceId      String?
  yearlyPriceId      String?   // For tracking yearly price ID
  status             String    @default("free") // free, active, canceled, past_due, unpaid
  plan               String    @default("free") // free, premium, enterprise
  isYearly           Boolean   @default(false)
  currentPeriodStart DateTime?
  currentPeriodEnd   DateTime?
  canceledAt         DateTime?
  cancelAtPeriodEnd  Boolean   @default(false)
  trialStart         DateTime?
  trialEnd           DateTime?
  trialEndsAt        DateTime? // For trial management
  pausedAt           DateTime? // For pause functionality
  resumesAt          DateTime? // For resume functionality
  downgradeScheduledAt DateTime? // For scheduled downgrades
  upgradeProtectedUntil DateTime? // Prevent immediate downgrades
  referralCode       String?   @unique // For referral program
  referredBy         String?   // Who referred this user
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Payment {
  id                String   @id @default(cuid())
  userId            String
  stripePaymentId   String   @unique
  stripeInvoiceId   String?
  amount            Int      // in cents
  currency          String   @default("usd")
  status            String   // succeeded, failed, pending
  description       String?
  plan              String   // premium, enterprise
  isYearly          Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

// Webhook idempotency tracking
model ProcessedWebhookEvent {
  id        String   @id @default(cuid())
  eventId   String   @unique
  type      String
  processed DateTime @default(now())
  metadata  String?  // JSON string for debugging
}

// Usage tracking for features
model UsageTracking {
  id        String   @id @default(cuid())
  userId    String
  feature   String   // 'templates', 'platforms', 'exports', 'analytics'
  count     Int      @default(0)
  limit     Int
  resetAt   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, feature])
  @@index([userId])
  @@index([resetAt])
}

// Phase 3: Enhanced Content Models

// Enhanced daily tasks with rich content
model DailyTask {
  id                String   @id @default(cuid())
  roadmapId         String   // e.g., "youtube_gaming_phase1_week1"
  platform          String   // youtube, tiktok, twitch
  niche             String   // gaming, education, lifestyle, etc.
  phase             Int
  week              Int
  dayRange          String   // e.g., "Day 1", "Days 3-4"
  title             String
  description       String   @db.Text
  instructions      Json     // Detailed step-by-step instructions
  timeEstimate      Int      // in minutes
  difficulty        String   // beginner, intermediate, advanced
  category          String   // content, technical, community, analytics, monetization
  platformSpecific  Json     // { tips: [], bestPractices: [], commonMistakes: [] }
  successMetrics    Json     // [{ metric, target, howToMeasure }]
  resources         Json     // [{ type, title, url?, content? }]
  prerequisites     Json?    // Array of prerequisite task IDs
  relatedTasks      Json?    // Array of related task IDs
  orderIndex        Int      // For sorting tasks within a day
  metadata          Json?    // Additional metadata from research docs
  
  completions TaskCompletion[]
  
  @@index([roadmapId])
  @@index([platform, niche])
  @@index([phase, week])
}

// Track user task completions with quality metrics
model TaskCompletion {
  id          String   @id @default(cuid())
  userId      String
  taskId      String
  completedAt DateTime @default(now())
  timeSpent   Int?     // in minutes
  notes       String?  @db.Text
  quality     Int?     // 1-5 rating
  skipped     Boolean  @default(false)
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  task DailyTask @relation(fields: [taskId], references: [id])
  
  @@unique([userId, taskId])
  @@index([userId])
  @@index([completedAt])
}

// Milestone definitions for achievements
model Milestone {
  id           String   @id @default(cuid())
  name         String
  description  String   @db.Text
  requirement  Json     // { type: 'task_completion' | 'metric_achievement' | 'time_based', value }
  reward       Json     // { type: 'badge' | 'feature_unlock' | 'template_access', value }
  celebration  Json     // { type: 'modal' | 'confetti' | 'notification', message, sharePrompt? }
  platform     String?  // null for cross-platform milestones
  niche        String?  // null for general milestones
  orderIndex   Int      // For displaying in order
  
  achievements MilestoneAchievement[]
}

// Track user milestone achievements
model MilestoneAchievement {
  id           String   @id @default(cuid())
  userId       String
  milestoneId  String
  achievedAt   DateTime @default(now())
  shared       Boolean  @default(false)
  
  user      User @relation(fields: [userId], references: [id], onDelete: Cascade)
  milestone Milestone @relation(fields: [milestoneId], references: [id])
  
  @@unique([userId, milestoneId])
}

// Content recommendations for "For You" page
model ContentRecommendation {
  id          String   @id @default(cuid())
  userId      String
  contentType String   // task, template, tip, resource, milestone
  contentId   String   // ID of the recommended content
  score       Float    // Recommendation score (0-1)
  reason      String   // Why this was recommended
  shown       Boolean  @default(false)
  engaged     Boolean  @default(false)
  dismissed   Boolean  @default(false)
  createdAt   DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, shown])
  @@index([createdAt])
}

// Store generated templates
model GeneratedTemplate {
  id         String   @id @default(cuid())
  userId     String
  category   String   // video_script, thumbnail, description, etc.
  type       String   // hook, structure, outro, etc.
  title      String
  content    Json     // The actual template content with variables
  variables  Json     // Variables used in the template
  platform   String
  niche      String
  isPublic   Boolean  @default(false) // For sharing templates
  uses       Int      @default(0)
  rating     Float?   // Average rating from users
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([category, type])
  @@index([platform, niche])
}

// Template ratings for community feedback
model TemplateRating {
  id         String   @id @default(cuid())
  userId     String
  templateId String
  rating     Int      // 1-5
  review     String?  @db.Text
  createdAt  DateTime @default(now())
  
  @@unique([userId, templateId])
  @@index([templateId])
}

// Quick tips and bite-sized content
model QuickTip {
  id         String   @id @default(cuid())
  title      String
  content    String   @db.Text
  category   String   // growth, engagement, monetization, technical
  platform   String?  // null for general tips
  niche      String?  // null for general tips
  difficulty String   // beginner, intermediate, advanced
  tags       Json     // Array of tags for searchability
  source     String?  // Reference to research doc
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  
  @@index([platform, niche])
  @@index([category])
  @@index([tags])
}

// Track content engagement for recommendations
model ContentEngagement {
  id          String   @id @default(cuid())
  userId      String
  contentType String   // task, template, tip, resource
  contentId   String
  action      String   // viewed, completed, shared, saved, dismissed
  duration    Int?     // Time spent in seconds
  createdAt   DateTime @default(now())
  
  @@index([userId, contentType])
  @@index([contentId])
  @@index([createdAt])
}
