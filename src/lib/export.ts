import { jsPDF } from 'jspdf';
import 'jspdf-autotable';
import { saveAs } from 'file-saver';
import { format } from 'date-fns';

// Extend jsPDF types for autoTable
declare module 'jspdf' {
  interface jsPDF {
    autoTable: (options: any) => jsPDF;
  }
}

interface ExportOptions {
  filename?: string;
  format: 'pdf' | 'csv' | 'json';
  title?: string;
  description?: string;
  metadata?: Record<string, any>;
}

// Generic export function
export async function exportData(data: any, options: ExportOptions) {
  const timestamp = format(new Date(), 'yyyy-MM-dd');
  const filename = options.filename || `export-${timestamp}`;

  switch (options.format) {
    case 'pdf':
      return exportToPDF(data, { ...options, filename });
    case 'csv':
      return exportToCSV(data, { ...options, filename });
    case 'json':
      return exportToJSON(data, { ...options, filename });
    default:
      throw new Error(`Unsupported export format: ${options.format}`);
  }
}

// Export roadmap to PDF
export async function exportRoadmapToPDF(roadmap: any, userInfo?: any) {
  const doc = new jsPDF();
  const pageWidth = doc.internal.pageSize.getWidth();
  const pageHeight = doc.internal.pageSize.getHeight();
  
  // Header
  doc.setFillColor(139, 92, 246); // Purple
  doc.rect(0, 0, pageWidth, 40, 'F');
  
  // Title
  doc.setTextColor(255, 255, 255);
  doc.setFontSize(24);
  doc.text('90-Day Creator Roadmap', pageWidth / 2, 20, { align: 'center' });
  
  // Subtitle
  doc.setFontSize(12);
  doc.text(`Generated on ${format(new Date(), 'MMMM dd, yyyy')}`, pageWidth / 2, 30, { align: 'center' });
  
  // Reset text color
  doc.setTextColor(0, 0, 0);
  
  // User Info Section
  let yPosition = 55;
  if (userInfo) {
    doc.setFontSize(16);
    doc.text('Creator Profile', 20, yPosition);
    yPosition += 10;
    
    doc.setFontSize(10);
    if (userInfo.name) {
      doc.text(`Name: ${userInfo.name}`, 20, yPosition);
      yPosition += 7;
    }
    if (userInfo.platform) {
      doc.text(`Platform: ${userInfo.platform}`, 20, yPosition);
      yPosition += 7;
    }
    if (userInfo.niche) {
      doc.text(`Niche: ${userInfo.niche}`, 20, yPosition);
      yPosition += 7;
    }
    if (userInfo.goal) {
      doc.text(`Goal: ${userInfo.goal}`, 20, yPosition);
      yPosition += 7;
    }
    
    yPosition += 10;
  }
  
  // Roadmap Content
  doc.setFontSize(16);
  doc.text('Your 90-Day Journey', 20, yPosition);
  yPosition += 10;
  
  // Create table data from roadmap
  const tableData = roadmap.phases.map((phase: any, index: number) => {
    const phaseNumber = index + 1;
    const weekRange = `Weeks ${phaseNumber * 4 - 3}-${phaseNumber * 4}`;
    const focus = phase.focus || `Phase ${phaseNumber} Focus`;
    const keyTasks = phase.tasks?.slice(0, 3).join('\n') || 'Define your tasks';
    
    return [weekRange, focus, keyTasks];
  });
  
  // Add roadmap table
  doc.autoTable({
    startY: yPosition,
    head: [['Timeline', 'Focus Area', 'Key Tasks']],
    body: tableData,
    theme: 'grid',
    headStyles: {
      fillColor: [139, 92, 246],
      textColor: 255,
      fontSize: 12,
      fontStyle: 'bold'
    },
    bodyStyles: {
      fontSize: 10,
      cellPadding: 5
    },
    columnStyles: {
      0: { cellWidth: 40 },
      1: { cellWidth: 50 },
      2: { cellWidth: 80 }
    },
    margin: { left: 20, right: 20 }
  });
  
  // Add footer
  const finalY = (doc as any).lastAutoTable.finalY || yPosition + 100;
  if (finalY < pageHeight - 40) {
    doc.setFontSize(8);
    doc.setTextColor(128, 128, 128);
    doc.text('Generated by Creators AI Compass', pageWidth / 2, pageHeight - 20, { align: 'center' });
    doc.text('Â© 2025 Creators AI Compass. All rights reserved.', pageWidth / 2, pageHeight - 15, { align: 'center' });
  }
  
  // Save the PDF
  doc.save(`roadmap-${format(new Date(), 'yyyy-MM-dd')}.pdf`);
}

// Export analytics data to PDF
export async function exportAnalyticsToPDF(analytics: any, options?: { title?: string }) {
  const doc = new jsPDF();
  const pageWidth = doc.internal.pageSize.getWidth();
  
  // Header
  doc.setFillColor(59, 130, 246); // Blue
  doc.rect(0, 0, pageWidth, 40, 'F');
  
  // Title
  doc.setTextColor(255, 255, 255);
  doc.setFontSize(24);
  doc.text(options?.title || 'Analytics Report', pageWidth / 2, 20, { align: 'center' });
  
  // Date
  doc.setFontSize(12);
  doc.text(`Generated on ${format(new Date(), 'MMMM dd, yyyy')}`, pageWidth / 2, 30, { align: 'center' });
  
  // Reset text color
  doc.setTextColor(0, 0, 0);
  
  let yPosition = 55;
  
  // Summary Metrics
  doc.setFontSize(16);
  doc.text('Summary Metrics', 20, yPosition);
  yPosition += 10;
  
  // Metrics table
  const metricsData = [
    ['Total Followers', analytics.metrics?.totalFollowers?.toLocaleString() || '0'],
    ['Total Views', analytics.metrics?.totalViews?.toLocaleString() || '0'],
    ['Average Engagement', `${analytics.metrics?.avgEngagement || 0}%`],
    ['Growth Rate', `${analytics.metrics?.growthRate || 0}%`]
  ];
  
  doc.autoTable({
    startY: yPosition,
    body: metricsData,
    theme: 'striped',
    bodyStyles: {
      fontSize: 10
    },
    columnStyles: {
      0: { fontStyle: 'bold' }
    },
    margin: { left: 20, right: 20 }
  });
  
  // Performance Data
  yPosition = (doc as any).lastAutoTable.finalY + 20;
  
  if (analytics.contentPerformance) {
    doc.setFontSize(16);
    doc.text('Content Performance', 20, yPosition);
    yPosition += 10;
    
    const performanceData = analytics.contentPerformance.map((item: any) => [
      item.type,
      item.views?.toLocaleString() || '0',
      `${item.engagement || 0}%`,
      item.count || 0
    ]);
    
    doc.autoTable({
      startY: yPosition,
      head: [['Content Type', 'Views', 'Engagement', 'Count']],
      body: performanceData,
      theme: 'grid',
      headStyles: {
        fillColor: [59, 130, 246],
        textColor: 255
      },
      margin: { left: 20, right: 20 }
    });
  }
  
  // Save the PDF
  doc.save(`analytics-report-${format(new Date(), 'yyyy-MM-dd')}.pdf`);
}

// Export data to CSV
export function exportToCSV(data: any[], options: { filename: string; headers?: string[] }) {
  if (!data || data.length === 0) {
    throw new Error('No data to export');
  }
  
  // Get headers
  const headers = options.headers || Object.keys(data[0]);
  
  // Create CSV content
  const csvContent = [
    headers.join(','),
    ...data.map(row => 
      headers.map(header => {
        const value = row[header];
        // Escape quotes and wrap in quotes if contains comma
        const escaped = String(value || '').replace(/"/g, '""');
        return escaped.includes(',') ? `"${escaped}"` : escaped;
      }).join(',')
    )
  ].join('\n');
  
  // Create blob and save
  const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
  saveAs(blob, `${options.filename}.csv`);
}

// Export data to JSON
export function exportToJSON(data: any, options: { filename: string }) {
  const jsonContent = JSON.stringify(data, null, 2);
  const blob = new Blob([jsonContent], { type: 'application/json;charset=utf-8;' });
  saveAs(blob, `${options.filename}.json`);
}

// Export templates to PDF
export function exportTemplatesToPDF(templates: any[], options?: { title?: string }) {
  const doc = new jsPDF();
  const pageWidth = doc.internal.pageSize.getWidth();
  
  // Header
  doc.setFillColor(236, 72, 153); // Pink
  doc.rect(0, 0, pageWidth, 40, 'F');
  
  // Title
  doc.setTextColor(255, 255, 255);
  doc.setFontSize(24);
  doc.text(options?.title || 'Content Templates', pageWidth / 2, 20, { align: 'center' });
  
  // Date
  doc.setFontSize(12);
  doc.text(`Generated on ${format(new Date(), 'MMMM dd, yyyy')}`, pageWidth / 2, 30, { align: 'center' });
  
  // Reset text color
  doc.setTextColor(0, 0, 0);
  
  let yPosition = 55;
  
  // Add each template
  templates.forEach((template, index) => {
    // Check if we need a new page
    if (yPosition > 250) {
      doc.addPage();
      yPosition = 20;
    }
    
    // Template title
    doc.setFontSize(14);
    doc.setFont(undefined, 'bold');
    doc.text(`${index + 1}. ${template.title || 'Template'}`, 20, yPosition);
    yPosition += 8;
    
    // Template content
    doc.setFontSize(10);
    doc.setFont(undefined, 'normal');
    
    // Split content into lines that fit the page
    const lines = doc.splitTextToSize(template.content || '', pageWidth - 40);
    lines.forEach((line: string) => {
      if (yPosition > 270) {
        doc.addPage();
        yPosition = 20;
      }
      doc.text(line, 20, yPosition);
      yPosition += 5;
    });
    
    yPosition += 10; // Space between templates
  });
  
  // Save the PDF
  doc.save(`templates-${format(new Date(), 'yyyy-MM-dd')}.pdf`);
}

// Helper function to export table data
export function exportTableToCSV(tableData: any[], filename: string) {
  exportToCSV(tableData, { filename });
}

// Helper function to check if export is available for user
export function canExport(subscription: string | null, feature: string): boolean {
  const freeExports = ['basic-roadmap']; // Features available to free users
  const premiumExports = ['analytics', 'templates', 'full-roadmap', 'progress-report'];
  
  if (freeExports.includes(feature)) {
    return true;
  }
  
  return subscription === 'premium' || subscription === 'enterprise';
}